AWSTemplateFormatVersion: 2010-09-09
Description: >
  saves account-name,account, and status from a dynamodb database to an s3

Resources:
  LambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: LambdaFunctionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - dynamodb:scan
              - dynamodb:list
              - s3:ListAllMyBucket
              - s3:ListBucket
              - s3:PutObject
              - s3:PutObjectAcl
              - s3:GetBucketLocation
            Resource: 
            - arn:aws:dynamodb:eu-west-2:251045990954:table/MetadataJson
            - arn:aws:lambda:eu-west-2:251045990954:function:Stack-10-LambdaFunction-HUcUFXbCq4ZJ
            - arn:aws:s3:::dbmetadata/
            - '*'
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.7
      Timeout: 5
      Handler: index.lambda_handler
      Role: !GetAtt LambdaFunctionRole.Arn
      Code:
        ZipFile:
          !Sub
            - |-
              import boto3
              from datetime import date, datetime
              import csv
              def lambda_handler(event, context):
                  dynamodb = boto3.resource("dynamodb", region_name='eu-west-2')
                  table = dynamodb.Table('MetadataJson')
                  
                  tableDict = table.scan(
                      ProjectionExpression='#AN, account, #S',
                      ExpressionAttributeNames={
                          '#AN': 'account-name',
                          '#S': 'status',
                      },
                  )
                  
                  
                  tableList = list(tableDict.items())
                  tableResponse = tableList[0][1]
                  tableData = []
                  for i in range(len(tableResponse)):
                          tableData.append([tableResponse[i].get('account-name'), 
                          tableResponse[i].get('account'), 
                          tableResponse[i].get('status')])
                          
                          
                  csv_name = 'Metadata-'+str(date.today())+'-'+datetime.now().strftime("%H-%M")+'.csv'
                  with open('/tmp/'+csv_name, 'w', newline='') as csvfile:
                      filewriter = csv.writer(csvfile, delimiter= ',', quoting= csv.QUOTE_NONE)
                      filewriter.writerow(('account name', 'account ID', 'status'))

                      filewriter.writerows(tableData)
                  
                  
                  S3_Client = boto3.client("s3", region_name='eu-west-2')
                  allBuckets = S3_Client.list_buckets().get('Buckets')
                  foundBucket = False
                  i = 0
                  while foundBucket == False and i < len(allBuckets) :
                      if allBuckets[i].get('Name') == 'dbmetadata':
                          foundBucket = True
                      i+=1
                  if foundBucket == False:
                      S3_Client.create_bucket(
                          Bucket='dbmetadata',
                          CreateBucketConfiguration= {
                              'LocationConstraint': 'eu-west-2'
                          }
                          
                      )
                  
                  S3_Client.upload_file('/tmp/'+csv_name,'dbmetadata',csv_name)
            -
              lambda_function_role_arn: !Ref LambdaFunctionRole