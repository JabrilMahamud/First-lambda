Resources:
  DynamoTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      KeySchema:
        - AttributeName: ""
          KeyType: ""
  ThisServicePolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: SomePolicyName
      PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: 
                  - "dynamodb:GetItem"
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:Query"
                Resource: "*"

  HelloLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: HelloLambdaRole
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole

  HelloLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: HelloLambdaFunction
      Role: !GetAtt HelloLambdaRole.Arn
      Runtime: python3.7
      Handler: index.my_handler
      Code:
        ZipFile: |
          import boto3
          from datetime import date,datetime
          import csv
          def lambda_handler(event,context):
            csv_name = 'MetaData'+str(date.today())+'-'+datetime.now().strftime("%H-%M")+'.csv'
            i=0
            dynamoDB=boto3.resource("dynamodb",region_name='eu-west-1')
            table=dynamoDB.Table('WS-Z038_Metadata')
            tabledict=table.scan(
            ProjectionExpression="#AN,account,#S",
            ExpressionAttributeNames={
              '#AN':'account-name',
              '#S':'status',
              },
            )
            
            tableList=list(tabledict.items())
            tableResponse=tableList[0][1]
            tableData=[]
            for index in range(len(tableResponse)):
              tableData.append([tableResponse[index].get('account-name'),
              tableResponse[index].get('account'),
              tableResponse[index].get('status')])

          csv_name = 'Metadata-'+str(date.today())+'-'+datetime.now().strftime("%H-%M")+'.csv'
          with open('/tmp/'+csv_name, 'w', newline='') as csvfile:
            filewriter = csv.writer(csvfile, delimiter= ',', quoting= csv.QUOTE_NONE)
            filewriter.writerow(('account name', 'account ID', 'status'))
            filewriter.writerows(tableData)
    
            S3_Client = boto3.client("s3", region_name='eu-west-1')
            allBuckets = S3_Client.list_buckets().get('Buckets')
            foundBucket = False

            j = 0
          while foundBucket == False and j < len(allBuckets) :
          if allBuckets[j].get('Name') == 'ws-z038-metadata-bucket':
            foundBucket = True
            j+=1
          if foundBucket == False:
            S3_Client.create_bucket(
              Bucket='ws-z038-metadata-bucket',
              CreateBucketConfiguration= {
                'LocationConstraint': 'eu-west-1'
                }
              )
              S3_Client.upload_file('/tmp/'+csv_name,'ws-z038-metadata-bucket',csv_name)  